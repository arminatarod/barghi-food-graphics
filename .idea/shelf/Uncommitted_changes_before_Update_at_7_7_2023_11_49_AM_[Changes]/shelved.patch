Index: src/main/java/com/example/barghifoodgraphics/Restaurant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.barghifoodgraphics;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.io.File;\r\nimport java.util.HashSet;\r\n\r\npublic class Restaurant {\r\n    private int location, balance, ratingCount, adminID;\r\n    private double averageRating;\r\n    private String name;\r\n    private HashSet<Integer> orders = new HashSet<>(), activeOrders = new HashSet<>(), comments = new HashSet<>(), menu = new HashSet<>();\r\n    private HashSet<String> foodType = new HashSet<>();\r\n    private HashSet<Food> foods = new HashSet<>();\r\n    public HashSet<String> getFoodType() {\r\n        return foodType;\r\n    }\r\n    public void addFoodToMenu(String foodName,int id,Restaurant restaurant,int price)\r\n    {\r\n        foods.add(new Food(id,price,restaurant, foodName));\r\n        menu.add(id);\r\n    }\r\n    public void addFoodType(String type) {\r\n        foodType.add(type);\r\n    }\r\n    public void removeFoodType(String type) {\r\n        foodType.remove(type);\r\n    }\r\n    public void setLocation(int location) {\r\n        this.location = location;\r\n    }\r\n    public int getLocation() {\r\n        return location;\r\n    }\r\n    public void addOrder(int orderID) {\r\n        activeOrders.add(orderID);\r\n    }\r\n    public HashSet<Integer> getOrders() {\r\n        return orders;\r\n    }\r\n    public HashSet<Integer> getActiveOrders() {\r\n        return activeOrders;\r\n    }\r\n    public int getBalance() {\r\n        return balance;\r\n    }\r\n    public void addBalance(int value) {\r\n        balance += value;\r\n    }\r\n    public HashSet<Integer> getMenu() {\r\n        return menu;\r\n    }\r\n    public void deleteMenu() {\r\n        menu.clear();\r\n    }\r\n    public double getAverageRating() {\r\n        return averageRating;\r\n    }\r\n    public int getRatingCount() {\r\n        return ratingCount;\r\n    }\r\n    public void addRating(int rating) {\r\n        averageRating = (averageRating * ratingCount + rating) / (ratingCount + 1);\r\n        ratingCount++;\r\n    }\r\n    public void editRating(int oldRating, int newRating) {\r\n        averageRating = (averageRating * ratingCount - oldRating + newRating) / ratingCount;\r\n    }\r\n    public void addComment(int commentID) {\r\n        comments.add(commentID);\r\n    }\r\n    public HashSet<Integer> getComments() {\r\n        return comments;\r\n    }\r\n    public void setAdmin(int adminID) {\r\n        this.adminID = adminID;\r\n    }\r\n    public int getAdmin() {\r\n        return adminID;\r\n    }\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    static public Restaurant getRestaurant(int ID) {\r\n        Restaurant result;\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        try {\r\n            result = mapper.readValue(\"src/data/restaurants/\" + ID + \".json\", Restaurant.class);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n        return result;\r\n    }\r\n    static public void saveRestaurant(int ID, Restaurant restaurant) {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        try {\r\n            mapper.writeValue(new File(\"src/data/restaurants/\" + ID + \".json\"), restaurant);\r\n        } catch (Exception ignored) {}\r\n    }\r\n    public void showRestaurant()\r\n    {\r\n        System.out.println(\"Restaurant name: \" + name + \" \" + \"Average rating: \" + averageRating);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/barghifoodgraphics/Restaurant.java b/src/main/java/com/example/barghifoodgraphics/Restaurant.java
--- a/src/main/java/com/example/barghifoodgraphics/Restaurant.java	(revision 43b53edca3a273d9e36cf7ab395101d82421b2f7)
+++ b/src/main/java/com/example/barghifoodgraphics/Restaurant.java	(date 1688717222606)
@@ -8,7 +8,7 @@
 public class Restaurant {
     private int location, balance, ratingCount, adminID;
     private double averageRating;
-    private String name;
+    private String name,type;
     private HashSet<Integer> orders = new HashSet<>(), activeOrders = new HashSet<>(), comments = new HashSet<>(), menu = new HashSet<>();
     private HashSet<String> foodType = new HashSet<>();
     private HashSet<Food> foods = new HashSet<>();
@@ -104,4 +104,10 @@
     {
         System.out.println("Restaurant name: " + name + " " + "Average rating: " + averageRating);
     }
+    public String getType() {
+        return type;
+    }
+    public void setType(String type) {
+        this.type = type;
+    }
 }
Index: src/main/java/com/example/barghifoodgraphics/Core.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.barghifoodgraphics;\r\n\r\nimport java.util.*;\r\n\r\npublic class Core {\r\n    MapG map;\r\n\r\n    public Core() {\r\n        map = new MapG();\r\n    }\r\n\r\n    HashSet<Account> accounts;\r\n    int loggedInAccount = -1, loggedInUser = -1, loggedInAdmin = -1, loggedInDeliveryman = -1;\r\n    int selectedRestaurant = -1, selectedFood = -1;\r\n    public void login(String userName, String password) {\r\n        if (loggedInAccount != -1) {\r\n            System.out.println(\"You are already logged in.\");\r\n            return;\r\n        }\r\n        for (Account acc : accounts) {\r\n            if (userName.equals(acc.getUsername())) {\r\n                if (password.equals(acc.getPassword())) {\r\n                    System.out.println(\"Logged in successfully.\");\r\n                    if (acc.getType().equals(\"User\"))\r\n                        loggedInUser = acc.getId();\r\n                    else if (acc.getType().equals(\"Admin\"))\r\n                        loggedInUser = acc.getId();\r\n                    else\r\n                        loggedInDeliveryman = acc.getId();\r\n                    loggedInAccount = acc.getId();\r\n                    return;\r\n                }\r\n                System.out.println(\"Incorrect password!\");\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"There is no account with this username!\");\r\n    }\r\n    public void logout() {\r\n        if (loggedInAccount == -1) {\r\n            System.out.println(\"No one has logged in!\");\r\n        } else {\r\n            if (loggedInDeliveryman != -1) {\r\n                System.out.println(\"Logged out successfully.\");\r\n                loggedInDeliveryman = -1;\r\n            } else if (loggedInUser != -1) {\r\n                System.out.println(\"Logged out successfully.\");\r\n                loggedInAdmin = -1;\r\n            } else {\r\n                System.out.println(\"Logged out successfully.\");\r\n                loggedInUser = -1;\r\n            }\r\n        }\r\n    }\r\n    public void addUser(String username, String password, String recoveryQuestion, String recoveryQuestionAnswer) {\r\n        accounts.add(new User(username, password, recoveryQuestion, recoveryQuestionAnswer, accounts.size()));\r\n    }\r\n    public void addDelivery(String username, String password, String recoveryQuestion, String recoveryQuestionAnswer) {\r\n        accounts.add(new Deliveryman(username, password, recoveryQuestion, recoveryQuestionAnswer, accounts.size()));\r\n    }\r\n    public void addAdmin(String username, String password, String recoveryQuestion, String recoveryQuestionAnswer) {\r\n        accounts.add(new Admin(username, password, recoveryQuestion, recoveryQuestionAnswer, accounts.size()));\r\n    }\r\n    public void showLocation() {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        }\r\n        System.out.println(Restaurant.getRestaurant(selectedRestaurant).getLocation());\r\n    }\r\n    public void editLocation(int nodeID) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        }\r\n        Restaurant.getRestaurant(selectedRestaurant).setLocation(nodeID);\r\n        System.out.println(\"The location has been updated successfully.\");\r\n    }\r\n    public void showFoodType() {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        }\r\n        for (String s : Restaurant.getRestaurant(selectedRestaurant).getFoodType())\r\n            System.out.println(s);\r\n    }\r\n    public int addFoodType(String type, boolean forSure) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return 1;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getActiveOrders().isEmpty()) {\r\n            System.out.println(\"The restaurant has active orders!\");\r\n            return 2;\r\n        } else if (Restaurant.getRestaurant(selectedRestaurant).getFoodType().contains(type)) {\r\n            System.out.println(\"The restaurant already contains this food type!\");\r\n            return 3;\r\n        } else if (!forSure) {\r\n            System.out.println(\"ARE YOU SURE YOU WANT TO ADD THIS FOOD TYPE TO YOUR RESTAURANT?\");\r\n            return 4;\r\n        } else {\r\n            Restaurant.getRestaurant(selectedRestaurant).addFoodType(type);\r\n            System.out.println(\"Food type added successfully.\");\r\n            return 0;\r\n        }\r\n    }\r\n    public int removeFoodType(String type, boolean forSure) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return 1;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getActiveOrders().isEmpty()) {\r\n            System.out.println(\"The restaurant has active orders!\");\r\n            return 2;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getFoodType().contains(type)) {\r\n            System.out.println(\"The restaurant does not contain this food type!\");\r\n            return 3;\r\n        } else if (!forSure) {\r\n            System.out.println(\"ARE YOU SURE YOU WANT TO REMOVE THIS FOOD TYPE FROM YOUR RESTAURANT?\");\r\n            return 4;\r\n        } else {\r\n            Restaurant.getRestaurant(selectedRestaurant).removeFoodType(type);\r\n            Restaurant.getRestaurant(selectedRestaurant).deleteMenu();\r\n            return 0;\r\n        }\r\n    }\r\n    public int editFoodType(String typeToRemove, String typeToAdd, boolean forSure) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return 1;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getActiveOrders().isEmpty()) {\r\n            System.out.println(\"The restaurant has active orders!\");\r\n            return 2;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getFoodType().contains(typeToRemove)) {\r\n            System.out.println(\"The restaurant does not contain the given food type!\");\r\n            return 3;\r\n        } else if (Restaurant.getRestaurant(selectedRestaurant).getFoodType().contains(typeToAdd)) {\r\n            System.out.println(\"The restaurant already contains the given food type!\");\r\n            return 4;\r\n        } else if (!forSure) {\r\n            System.out.println(\"ARE YOU SURE YOU WANT TO EDIT THIS FOOD TYPE IN YOUR RESTAURANT?\");\r\n            return 5;\r\n        } else {\r\n            Restaurant.getRestaurant(selectedRestaurant).removeFoodType(typeToRemove);\r\n            Restaurant.getRestaurant(selectedRestaurant).addFoodType(typeToAdd);\r\n            Restaurant.getRestaurant(selectedRestaurant).deleteMenu();\r\n            return 0;\r\n        }\r\n    }\r\n    public void showMenu() {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        }\r\n        for (int i : Restaurant.getRestaurant(selectedRestaurant).getMenu())\r\n            System.out.println(\"ID: \" + i + \", NAME: \" + Food.getFood(i).getName() + \", PRICE: \" + Food.getFood(i).getPrice() + \", DISCOUNT: \" + Food.getFood(i).getDiscount() + \", RATING: \" + Food.getFood(i).getAverageRating() + \", IS ACTIVE: \" + Food.getFood(i).getActive());\r\n    }\r\n    public void editFoodPrice(int foodID, int price) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getMenu().contains(foodID)) {\r\n            System.out.println(\"The selected restaurant does not have a food with the given ID!\");\r\n        } else {\r\n            Food.getFood(foodID).setPrice(price);\r\n            System.out.println(\"Information updated successfully.\");\r\n        }\r\n    }\r\n    public void editFoodName(int foodID, String newName) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getMenu().contains(foodID)) {\r\n            System.out.println(\"The selected restaurant does not have a food with the given ID!\");\r\n        } else {\r\n            Food.getFood(foodID).setName(newName);\r\n            System.out.println(\"Information updated successfully.\");\r\n        }\r\n    }\r\n    public void addFood(String foodName, int foodPrice) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n        }\r\n        else if(Restaurant.getRestaurant(selectedRestaurant).getFoodType().contains(foodName))\r\n        {\r\n            System.out.println(\"The selected restaurant has a food with the given name!\");\r\n        }\r\n        else\r\n        {\r\n            int id = 10;//byd ye rvshi bra random krdn id estefade beshe mesln tike avl id resturan bashe tike dovom msln indexsh to list\r\n            Restaurant.getRestaurant(selectedRestaurant).addFoodToMenu(foodName,id,Restaurant.getRestaurant(selectedRestaurant),foodPrice);\r\n            System.out.println(\"The food added successfully.\");\r\n        }\r\n    }\r\n    public void activateFood(int foodID) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getMenu().contains(foodID)) {\r\n            System.out.println(\"The selected restaurant does not have a food with the given ID!\");\r\n        } else {\r\n            Food.getFood(foodID).setActive(true);\r\n            System.out.println(\"Information updated successfully.\");\r\n        }\r\n    }\r\n    public void deactivateFood(int foodID) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getMenu().contains(foodID)) {\r\n            System.out.println(\"The selected restaurant does not have a food with the given ID!\");\r\n        } else {\r\n            Food.getFood(foodID).setActive(false);\r\n            System.out.println(\"Information updated successfully.\");\r\n        }\r\n    }\r\n    public void discountFood(int foodID, int discountPercentage, int timestamp) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n            return;\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getMenu().contains(foodID)) {\r\n            System.out.println(\"The selected restaurant does not have a food with the given ID!\");\r\n        } else {\r\n            Food.getFood(foodID).setDiscount(discountPercentage, timestamp);\r\n            System.out.println(\"Information updated successfully.\");\r\n        }\r\n    }\r\n    public void selectFood(int foodID) {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n        } else if (!Restaurant.getRestaurant(selectedRestaurant).getMenu().contains(foodID)) {\r\n            System.out.println(\"The selected restaurant does not have a food with the given ID!\");\r\n        } else {\r\n            selectedFood = foodID;\r\n            System.out.println(\"Food selected successfully.\");\r\n        }\r\n    }\r\n    public void displayRating() {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else {\r\n            System.out.println(\"AVERAGE RATING: \" + Food.getFood(selectedFood).getAverageRating());\r\n        }\r\n    }\r\n    public void displayComments() {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else {\r\n            for (int i : Food.getFood(selectedFood).getComments())\r\n                System.out.println(\"ID: \" + i + \", USER: \" + Account.getAccount(Comment.getComment(i).getCommenter()).getUsername() + \", CONTENT: \" + Comment.getComment(i).getContent() + \", RESPONSE: \" + Comment.getComment(i).getAnswer());\r\n        }\r\n    }\r\n    public void addResponse(int commentID, String message) {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else if (!Food.getFood(selectedFood).getComments().contains(commentID)) {\r\n            System.out.println(\"The selected food does not have a comment with the given ID!\");\r\n        } else if (Comment.getComment(commentID).getAnswer() != null) {\r\n            System.out.println(\"This comment has already been answered!\");\r\n        } else {\r\n            Comment.getComment(commentID).setAnswer(message);\r\n            System.out.println(\"Response added successfully.\");\r\n        }\r\n    }\r\n    public void editResponse(int commentID, String message) {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else if (!Food.getFood(selectedFood).getComments().contains(commentID)) {\r\n            System.out.println(\"The selected food does not have a comment with the given ID!\");\r\n        } else if (Comment.getComment(commentID).getAnswer() == null) {\r\n            System.out.println(\"This comment has never been answered!\");\r\n        } else {\r\n            Comment.getComment(commentID).setAnswer(message);\r\n            System.out.println(\"Response edited successfully.\");\r\n        }\r\n    }\r\n    public void unselectFood() {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else {\r\n            selectedFood = -1;\r\n            System.out.println(\"Food unselected successfully.\");\r\n        }\r\n    }\r\n    public void unselectRestaurant() {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n        } else {\r\n            selectedRestaurant = -1;\r\n            System.out.println(\"Restaurant unselected successfully.\");\r\n        }\r\n    }\r\n    public void displayActiveOrders() {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in yet!!!\");\r\n        } else if (User.getUser(loggedInUser).getOrders().isEmpty()) {\r\n            System.out.println(\"There is no order!!!\");\r\n        }else\r\n        {\r\n            int i=0;\r\n            for(Integer orderId : User.getUser(loggedInUser).getOrders())\r\n            {\r\n                i++;\r\n                System.out.println(\"Order ( \"+i+\" ) :\");\r\n                for(Map.Entry<Integer, Order.FoodData> item : Order.getOrder(orderId).getItems().entrySet())\r\n                {\r\n                    System.out.println(\"food name: \"+Food.getFood(item.getKey()).getName()+\" food id: \"+\r\n                            item.getKey()+\" count: \"+item.getValue().getCount()+\" discount: %\"+\r\n                            item.getValue().getDiscount()+\" total-price: \"+item.getValue().getTotalPrice());\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    public void editOrderStatus(int OrderId, String Status) {\r\n\r\n    }\r\n    // time handel shavad\r\n    public void editOrderDeliveryTime(int OrderTime, int time) {\r\n\r\n    }\r\n    //TODO : upddate for delivery man\r\n    public void showOrderHistory() {\r\n        if (selectedRestaurant == -1) {\r\n            System.out.println(\"No restaurant has been selected!\");\r\n        } else {\r\n            for (int i : Restaurant.getRestaurant(selectedRestaurant).getOrders())\r\n                System.out.println(\"ID: \" + i + \", STATUS: \" + Order.getOrder(i).getStatus() + \", DELIVERYMAN: \" + Order.getOrder(i).getDeliveryman() + \", USER: \" + Order.getOrder(i).getUser().getUsername() + \", PRICE: \" + Order.getOrder(i).getPrice());\r\n        }\r\n    }\r\n    /// modirate sefaresh :::::::\r\n    public void selectRestaurant(int restaurantID) {\r\n        if (loggedInAdmin == -1 && loggedInUser == -1) {\r\n            System.out.println(\"No admin has logged in!\");\r\n        } else {\r\n            selectedRestaurant = restaurantID;\r\n            System.out.println(\"Restaurant successfully selected.\");\r\n        }\r\n    }\r\n    public void searchRestaurantName(String name) {\r\n        List<Account> tmp = new ArrayList<>(accounts);\r\n        if(loggedInAdmin != -1)\r\n        {\r\n            boolean check = false;\r\n            Admin admin = (Admin) tmp.get(loggedInAdmin);\r\n            for(Integer restaurantId : admin.getRestaurants())\r\n            {\r\n                if(Restaurant.getRestaurant(restaurantId).getName().substring(0,name.length()-1).equals(name))\r\n                {\r\n                    System.out.println(\"Restaurant name : \"+ Restaurant.getRestaurant(restaurantId).getName()+ \" Restaurant ID: \"+ restaurantId);\r\n                    check = true;\r\n                }\r\n            }\r\n            if(!check)\r\n            {\r\n                System.out.println(\"There is no restaurant with this given name!!!\");\r\n            }\r\n        }\r\n        else if(loggedInUser != -1)\r\n        {\r\n            boolean check = false;\r\n            for(Account acc : tmp)\r\n            {\r\n                if(acc.getClass() == Admin.class)\r\n                {\r\n                    Admin admin = (Admin) acc;\r\n                    for(Integer restaurantId : admin.getRestaurants())\r\n                    {\r\n                        if(Restaurant.getRestaurant(restaurantId).getName().substring(0,name.length()-1).equals(name))\r\n                        {\r\n                            System.out.println(\"Restaurant name : \"+ Restaurant.getRestaurant(restaurantId).getName()+ \" Restaurant ID: \"+ restaurantId);\r\n                            check = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(!check)\r\n            {\r\n                System.out.println(\"There is no restaurant with this given name!!!\");\r\n            }\r\n        }\r\n    }\r\n    public void searchFoodName(String name) {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else if(selectedRestaurant == -1)\r\n        {\r\n            System.out.println(\"no restaurant has been selected!!!\");\r\n        }\r\n        else{\r\n            for(Integer foodId : Restaurant.getRestaurant(selectedRestaurant).getMenu())\r\n            {\r\n                if(name.equals(Food.getFood(foodId).getName().substring(0,name.length())));\r\n                {\r\n                    System.out.println(\"food name: \"+Food.getFood(foodId).getName()+\" food price: \"+ Food.getFood(foodId).getPrice());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public void addComment(String content) {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else if (Food.getFood(selectedFood).getRestaurant().getAdmin() == loggedInAdmin) {\r\n            System.out.println(\"You cannot write comments on your own products!\");\r\n        } else {\r\n            Comment c = new Comment();\r\n            c.setCommenter(loggedInAccount);\r\n            c.setContent(content);\r\n            //TODO: set ID\r\n            System.out.println(\"Comment added successfully.\");\r\n        }\r\n    }\r\n    public void editComment(int commentID, String content) {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else if (Comment.getComment(commentID).getCommenter() != loggedInAccount) {\r\n            System.out.println(\"You can only edit your own comments!\");\r\n        } else {\r\n            Comment.getComment(commentID).setContent(content);\r\n            System.out.println(\"Comment edited successfully.\");\r\n        }\r\n    }\r\n    public void submitRating(int rating) {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else if (Food.getFood(selectedFood).getRaters().contains(loggedInAccount)) {\r\n            System.out.println(\"You have already added a rating for this food!\");\r\n        } else {\r\n            Food.getFood(selectedFood).addRating(loggedInAccount, rating);\r\n            System.out.println(\"Rating submitted successfully.\");\r\n        }\r\n    }\r\n    public void editRating(int rating) {\r\n        if (selectedFood == -1) {\r\n            System.out.println(\"No food has been selected!\");\r\n        } else if (!Food.getFood(selectedFood).getRaters().contains(loggedInAccount)) {\r\n            System.out.println(\"You have not submitted a rating for this food!\");\r\n        } else {\r\n            Food.getFood(selectedFood).addRating(loggedInAccount, rating);\r\n            System.out.println(\"Rating submitted successfully.\");\r\n        }\r\n    }\r\n    public void addToCart(int count) {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else if(selectedFood == -1)\r\n        {\r\n            System.out.println(\"you have not selected any food!!!\");\r\n        }\r\n        else\r\n        {\r\n            for(int i=0;i<count;i++)\r\n                User.getUser(loggedInUser).getCart().addItem(Food.getFood(selectedFood));\r\n            System.out.println(\"added successfully.\");\r\n        }\r\n    }\r\n    public void selectOrder(int id) {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else if(User.getUser(loggedInUser).getOrders().size() == 0)\r\n        {\r\n            System.out.println(\"There is no order!!!\");\r\n        }\r\n        else if(!User.getUser(loggedInUser).getOrders().contains(id))\r\n        {\r\n            System.out.println(\"there is no order with this given id!\");\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"order id: \"+id);\r\n            for(Map.Entry<Integer, Order.FoodData> item : Order.getOrder(id).getItems().entrySet())//inja frz krdm id order hm yektast\r\n            {\r\n                System.out.println(\"food name: \"+Food.getFood(item.getKey()).getName()+ \" count: \"+ item.getValue().getCount()\r\n                        +\" discount: %\"+ item.getValue().getDiscount()+\" total-price: \"+item.getValue().getTotalPrice());\r\n            }\r\n        }\r\n    }\r\n    public void showCart() {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else if(User.getUser(loggedInUser).getCart().getItems().size() == 0)\r\n        {\r\n            System.out.println(\"There is no order!!!\");\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"your cart is: \");\r\n            for(Map.Entry<Integer, Order.FoodData> item : User.getUser(loggedInUser).getCart().getItems().entrySet())\r\n            {\r\n                System.out.println(\"food name: \"+Food.getFood(item.getKey()).getName()+ \" count: \"+ item.getValue().getCount()\r\n                        +\" discount: %\"+ item.getValue().getDiscount()+\" total-price: \"+item.getValue().getTotalPrice());\r\n            }\r\n        }\r\n    }\r\n    public void confirmOrder() {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else if(User.getUser(loggedInUser).getCart() == null)\r\n        {\r\n            System.out.println(\"you have not chosen anything!!!\");\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"Done!\");\r\n            User.getUser(loggedInUser).getCart().setStatus(\"CONFIRMED\");//agr ye enum bznim bra in kara be nzrm bhtare\r\n        }\r\n    }\r\n    public void showEstimatedDeliveryTime() {\r\n\r\n    }\r\n    public void chargeAccount(int value) {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else\r\n        {\r\n            User.getUser(loggedInUser).addBalance(value);\r\n            System.out.println(\"your balance charged successfully.\");\r\n        }\r\n    }\r\n    public void displayAccountBalance() {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"your balance is: \"+ User.getUser(loggedInUser).getBalance());\r\n        }\r\n    }\r\n    public void showPath() {\r\n\r\n    }\r\n    public void suggestRestuarant()\r\n    {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else\r\n        {\r\n            ArrayList<Integer> tmp  =new ArrayList<>();\r\n            for(Account account : accounts)\r\n            {\r\n                if(account.getClass() == Admin.class)\r\n                {\r\n                    for(Integer restaurantId : ((Admin) account).getRestaurants())\r\n                    {\r\n                        tmp.add(restaurantId);\r\n                    }\r\n                }\r\n            }\r\n            for(int i = 0;i < tmp.size()-1; i++)\r\n            {\r\n                for(int j = i+1;j < tmp.size(); j++)\r\n                {\r\n                    if(Restaurant.getRestaurant(tmp.get(i)).getAverageRating() > Restaurant.getRestaurant(tmp.get(j)).getAverageRating())\r\n                    {\r\n                        Collections.swap(tmp,i,j);\r\n                    }\r\n                }\r\n            }\r\n            for(int i=0;i<5;i++)\r\n            {\r\n                Restaurant.getRestaurant(tmp.get(tmp.size()-1-i)).showRestaurant();\r\n            }\r\n        }\r\n\r\n    }\r\n    public void suggestFood() {\r\n        if(loggedInUser == -1)\r\n        {\r\n            System.out.println(\"No one has logged in!!!\");\r\n        }\r\n        else if(selectedRestaurant == -1)\r\n        {\r\n            System.out.println(\"No restaurant has been selected!!!\");\r\n        }\r\n        else\r\n        {\r\n            ArrayList<Integer> tmp = new ArrayList<>();\r\n            for(Integer foodId : Restaurant.getRestaurant(selectedRestaurant).getMenu())\r\n            {\r\n                tmp.add(foodId);\r\n            }\r\n            for(int i=0;i<tmp.size();i++)\r\n            {\r\n                for(int j=i+1;j<tmp.size();j++)\r\n                {\r\n                    if(Food.getFood(tmp.get(i)).getAverageRating() > Food.getFood(tmp.get(j)).getAverageRating())\r\n                    {\r\n                        Collections.swap(tmp,i,j);\r\n                    }\r\n                }\r\n            }\r\n            for(int i=0;i<5;i++)\r\n            {\r\n                Food.getFood(tmp.get(i)).showFood();\r\n            }\r\n        }\r\n    }\r\n    public void setLocation(int id) {\r\n\r\n    }\r\n    public void getPathToRestaurant() {\r\n\r\n    }\r\n    public void getPathToUser() {\r\n\r\n    }\r\n    public void withdraw() {\r\n\r\n    }\r\n    // deliveryh man ordern entekhab mikone\r\n    public void acceptOrder(int id) {\r\n\r\n    }\r\n    public void showAvailableOrders() {\r\n        if(loggedInDeliveryman == -1)\r\n        {\r\n            System.out.println(\"Deliveryman has not logged in!!!\");\r\n        }\r\n        else\r\n        {\r\n            ArrayList<Integer> tmp  =new ArrayList<>();\r\n            for(Account account : accounts)\r\n            {\r\n                if(account.getClass() == Admin.class)\r\n                {\r\n                    for(Integer restaurantId : ((Admin) account).getRestaurants())\r\n                    {\r\n                        tmp.add(restaurantId);\r\n                    }\r\n                }\r\n            }\r\n            //TODO Matin khbrt kojaeiiiiii\r\n\r\n        }\r\n    }\r\n    public void forgetPasswordPressed(String username)\r\n    {\r\n        for(Account account : accounts)\r\n        {\r\n            if(account.getUsername().equals(username))\r\n            {\r\n                System.out.println(account.getRecoveryQuestion());\r\n            }\r\n        }\r\n    }\r\n    public void checkRecoveruQuestionAnswer(String username,String recoveryQuestionAnswer)\r\n    {\r\n        for(Account account : accounts)\r\n        {\r\n            if(account.getUsername().equals(username))\r\n            {\r\n                if(account.getRecoveryQuestionAnswer().equals(recoveryQuestionAnswer))\r\n                    System.out.println(account.getPassword());\r\n                else\r\n                    System.out.println(\"Your answer is wrong!!!\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/barghifoodgraphics/Core.java b/src/main/java/com/example/barghifoodgraphics/Core.java
--- a/src/main/java/com/example/barghifoodgraphics/Core.java	(revision 43b53edca3a273d9e36cf7ab395101d82421b2f7)
+++ b/src/main/java/com/example/barghifoodgraphics/Core.java	(date 1688717947502)
@@ -1,12 +1,14 @@
 package com.example.barghifoodgraphics;
 
+import java.io.FileNotFoundException;
 import java.util.*;
 
 public class Core {
     MapG map;
 
-    public Core() {
+    public Core() throws FileNotFoundException {
         map = new MapG();
+        map.readGraphFromFile("graph.txt");
     }
 
     HashSet<Account> accounts;
@@ -643,7 +645,7 @@
                     }
                 }
             }
-            //TODO Matin khbrt kojaeiiiiii
+
 
         }
     }
Index: src/main/java/com/example/barghifoodgraphics/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.barghifoodgraphics;\r\n\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\npublic class Main {\r\n    static Core core;\r\n    public static Matcher getMatcher(String command, String regex) {\r\n        Matcher matcher = Pattern.compile(regex).matcher(command);\r\n        return matcher.matches() ? matcher : null;\r\n    }\r\n    public static void main(String[] args) {\r\n        Scanner cin = new Scanner(System.in);\r\n        core = new Core();\r\n        String command;\r\n        Matcher matcher;\r\n        while (true) {\r\n            command = cin.nextLine();\r\n            if ((matcher = getMatcher(command, \"^-end *\")) != null) {\r\n                break;\r\n            }\r\n            if ((matcher = getMatcher(command, \"^-REGISTER ADMIN (?<name>[a-zA-Z]+) (?<password>\\\\S+) (?<recoveryQuestion>\\\\S+) (?<recoveryQuestionAnswer>\\\\S+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                String password = matcher.group(\"password\");\r\n                String recoveryQuestion = matcher.group(\"recoveryQuestion\");\r\n                String recoveryQuestionAnswer = matcher.group(\"recoveryQuestionAnswer\");\r\n                core.addAdmin(name, password, recoveryQuestion, recoveryQuestionAnswer);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-REGISTER USER (?<name>[a-zA-Z]+) (?<password>\\\\S+) (?<recoveryQuestion>\\\\S+) (?<recoveryQuestionAnswer>\\\\S+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                String password = matcher.group(\"password\");\r\n                String recoveryQuestion = matcher.group(\"recoveryQuestion\");\r\n                String recoveryQuestionAnswer = matcher.group(\"recoveryQuestionAnswer\");\r\n                core.addUser(name, password, recoveryQuestion, recoveryQuestionAnswer);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-REGISTER DELIVERY (?<name>[a-zA-Z]+) (?<password>\\\\S+) (?<recoveryQuestion>\\\\S+) (?<recoveryQuestionAnswer>\\\\S+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                String password = matcher.group(\"password\");\r\n                String recoveryQuestion = matcher.group(\"recoveryQuestion\");\r\n                String recoveryQuestionAnswer = matcher.group(\"recoveryQuestionAnswer\");\r\n                core.addDelivery(name, password, recoveryQuestion, recoveryQuestionAnswer);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-REGISTER DELIVERY (?<name>[a-zA-Z]+) (?<password>\\\\S+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                String password = matcher.group(\"password\");\r\n                core.login(name, password);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW ORDER HISTORY *\")) != null) {\r\n                core.showOrderHistory();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SEARCH FOOD NAME (?<name>[a-zA-Z]+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                core.searchFoodName(name);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-UNSELECT FOOD *\")) != null) {\r\n                core.unselectFood();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SEARCH RESTAURANT NAME (?<name>[a-zA-Z]+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                core.searchRestaurantName(name);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-UNSELECT RESTAURANT *\")) != null) {\r\n                core.unselectRestaurant();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-DISPLAY ACTIVE ORDERS *\")) != null) {\r\n                core.displayActiveOrders();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SELECT RESTAURANT (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.selectRestaurant(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SELECT FOOD (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.selectFood(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-DISCOUNT FOOD (?<id>[0-9]+) (?<percentage>[0-9]+) (?<time>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                int percentage = Integer.parseInt(matcher.group(\"percentage\"));\r\n                int time = Integer.parseInt(matcher.group(\"time\"));\r\n                core.discountFood(id, percentage, time);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SELECT ORDER (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.selectOrder(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT FOOD TYPE (?<toAdd>[a-zA-Z]+) (?<toRemove>[a-zA-Z]+) *\")) != null) {\r\n                // TODO : ghaare beineshon maslan ',' bahse\r\n                System.out.println(\"are you sure about that ? (type yes/no)\");\r\n                boolean fs = false;\r\n                command = cin.nextLine();\r\n                if ((matcher = getMatcher(command, \"^yes *\")) != null)\r\n                    fs = true;\r\n                String toAdd = matcher.group(\"toAdd\");\r\n                String toRemove = matcher.group(\"toRemove\");\r\n                core.editFoodType(toAdd, toRemove, fs);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-REMOVE FOOD TYPE (?<toRemove>[a-zA-Z]+) *\")) != null) {\r\n                // TODO : ghaare beineshon maslan ',' bahse\r\n                System.out.println(\"are you sure about that ? (type yes/no)\");\r\n                boolean fs = false;\r\n                command = cin.nextLine();\r\n                if ((matcher = getMatcher(command, \"^yes *\")) != null)\r\n                    fs = true;\r\n                String toRemove = matcher.group(\"toRemove\");\r\n                core.removeFoodType(toRemove, fs);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ADD FOOD TYPE (?<toAdd>[a-zA-Z]+) *\")) != null) {\r\n                // TODO : ghaare beineshon maslan ',' bahse\r\n                System.out.println(\"are you sure about that ? (type yes/no)\");\r\n                boolean fs = false;\r\n                command = cin.nextLine();\r\n                if ((matcher = getMatcher(command, \"^yes *\")) != null)\r\n                    fs = true;\r\n                String toAdd = matcher.group(\"toAdd\");\r\n                core.addFoodType(toAdd, fs);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT RATING (?<newRating>[0-9]+) *\")) != null) {\r\n                int newRating = Integer.parseInt(matcher.group(\"newRating\"));\r\n                core.editRating(newRating);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-LOGOUT *\")) != null) {\r\n                core.logout();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ADD COMMENT (?<content>[a-zA-Z]+) *\")) != null) {\r\n                String content = matcher.group(\"content\");\r\n                core.addComment(content);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT LOCATION (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.editLocation(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW PATH *\")) != null) {\r\n                core.showPath();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SEARCH RESTAURANT NAME (?<name>[a-zA-Z]+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                core.searchRestaurantName(name);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW LOCATION *\")) != null) {\r\n                core.showLocation();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT COMMENT (?<id>[0-9]+) (?<content>[a-zA-Z]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                String content = matcher.group(\"content\");\r\n                core.editComment(id, content);\r\n            }\r\n            //TODO : yekam in dastor paini ajib nist ?\r\n            else if ((matcher = getMatcher(command, \"^-EDIT ORDER DELIVERY TIME (?<deliveryTime>[0-9]+) (?<time>[0-9]+) *\")) != null) {\r\n                int deliveryTime = Integer.parseInt(matcher.group(\"deliveryTime\"));\r\n                int time = Integer.parseInt(matcher.group(\"time\"));\r\n                core.editOrderDeliveryTime(deliveryTime, time);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW FOOD TYPE *\")) != null) {\r\n                core.showFoodType();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW MENU *\")) != null) {\r\n                core.showMenu();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SUGGEST FOOD *\")) != null) {\r\n                core.suggestFood();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ACTIVE FOOD (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.activateFood(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT ORDER STATUS (?<id>[0-9]+) (?<status>[a-zA-Z]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                String status = matcher.group(\"status\");\r\n                core.editOrderStatus(id, status);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ADD FOOD (?<name>[a-zA-Z]+) (?<price>[0-9]+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                int price = Integer.parseInt(matcher.group(\"price\"));\r\n                core.addFood(name, price);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW ESTIMATED DELIVERY TIME *\")) != null) {\r\n                core.showEstimatedDeliveryTime();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ADD TO CART (?<count>[0-9]+) *\")) != null) {\r\n                int count = Integer.parseInt(matcher.group(\"count\"));\r\n                core.addToCart(count);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ADD TO CART *\")) != null) {\r\n                int count = 1;\r\n                core.addToCart(count);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SUBMIT RATING (?<rating>[0-9]+) *\")) != null) {\r\n                int rating = Integer.parseInt(matcher.group(\"rating\"));\r\n                core.submitRating(rating);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-DISPLAY ACCOUNT BALANCE *\")) != null) {\r\n                core.displayAccountBalance();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT FOOD NAME (?<id>[0-9]+) (?<name>[a-zA-Z]+) *\")) != null) {\r\n                String name = matcher.group(\"name\");\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.editFoodName(id, name);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-DEACTIVE FOOD (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.deactivateFood(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-CONFIRM ORDER *\")) != null) {\r\n                core.confirmOrder();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT FOOD PRICE (?<id>[0-9]+) (?<price>[0-9]+) *\")) != null) {\r\n                int price = Integer.parseInt(matcher.group(\"price\"));\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.editFoodPrice(id, price);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ADD RESPONSE (?<id>[0-9]+) (?<content>[a-zA-Z]+) *\")) != null) {\r\n                String content = matcher.group(\"content\");\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.addResponse(id, content);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-EDIT RESPONSE (?<id>[0-9]+) (?<content>[a-zA-Z]+) *\")) != null) {\r\n                String content = matcher.group(\"content\");\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.editResponse(id, content);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW CART *\")) != null) {\r\n                core.showCart();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-CHARGE ACCOUNT (?<value>[0-9]+) *\")) != null) {\r\n                int value = Integer.parseInt(matcher.group(\"value\"));\r\n                core.chargeAccount(value);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-DISPLAY COMMENTS *\")) != null) {\r\n                core.displayComments();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-DISPLAY RATING *\")) != null) {\r\n                core.displayRating();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SET LOCATION (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.setLocation(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SHOW AVAILABLE ORDERS *\")) != null) {\r\n                core.showAvailableOrders();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-WITHDRAW *\")) != null) {\r\n                core.withdraw();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-ACCEPT ORDER (?<id>[0-9]+) *\")) != null) {\r\n                int id = Integer.parseInt(matcher.group(\"id\"));\r\n                core.acceptOrder(id);\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-GET PATH TO USER *\")) != null) {\r\n                core.getPathToUser();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-GET PATH TO RESTAURANT *\")) != null) {\r\n                core.getPathToRestaurant();\r\n            }\r\n            else if ((matcher = getMatcher(command, \"^-SUGGEST ORDER *\")) != null) {\r\n                core.suggestFood();\r\n            }\r\n\r\n            //TODO :  delivery man command,\r\n            //TODO : delivy mane commands like : suggest order, active order, get path\r\n            else {\r\n                System.out.println(\"Wrong command format !\");\r\n            }\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/barghifoodgraphics/Main.java b/src/main/java/com/example/barghifoodgraphics/Main.java
--- a/src/main/java/com/example/barghifoodgraphics/Main.java	(revision 43b53edca3a273d9e36cf7ab395101d82421b2f7)
+++ b/src/main/java/com/example/barghifoodgraphics/Main.java	(date 1688717947485)
@@ -1,5 +1,6 @@
 package com.example.barghifoodgraphics;
 
+import java.io.FileNotFoundException;
 import java.util.Scanner;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -9,7 +10,7 @@
         Matcher matcher = Pattern.compile(regex).matcher(command);
         return matcher.matches() ? matcher : null;
     }
-    public static void main(String[] args) {
+    public static void main(String[] args) throws FileNotFoundException {
         Scanner cin = new Scanner(System.in);
         core = new Core();
         String command;
